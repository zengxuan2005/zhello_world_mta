<?xml version="1.0" encoding="utf-8"?>
<edmx:Edmx xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" Version="4.0">
  <edmx:Reference Uri="http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/vocabularies/Org.OData.Core.V1.xml">
    <edmx:Include Alias="Core" Namespace="Org.OData.Core.V1" />
  </edmx:Reference>
  <edmx:Reference
    Uri="http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/cs02/vocabularies/Org.OData.Aggregation.V1.xml"
  >
    <edmx:Include Alias="Aggregation" Namespace="Org.OData.Aggregation.V1" />
  </edmx:Reference>
  <edmx:DataServices>
    <Schema xmlns="http://docs.oasis-open.org/odata/ns/edm" Namespace="com.sap.vocabularies.Common.v1" Alias="Common">
      <Annotation Term="Core.Description">
        <String>Common terms for all SAP vocabularies</String>
      </Annotation>
      <Annotation Term="Core.Description" Qualifier="Published">
        <String>2016-11-22 © Copyright 2013 SAP SE. All rights reserved.</String>
      </Annotation>

      <!-- Section: Versioning -->
      <Term Name="ServiceVersion" Type="Edm.Int32" AppliesTo="Schema">
        <Annotation Term="Core.Description"
          String="1 for first version of a service, incremented when schema changes incompatibly and service is published with a different URI" />
      </Term>
      <Term Name="ServiceSchemaVersion" Type="Edm.Int32" AppliesTo="Schema">
        <Annotation Term="Core.Description"
          String="0 for first schema version within a service version, incremented when schema changes compatibly" />
      </Term>

      <!-- Section: General Semantics -->
      <Term Name="Label" Type="Edm.String">
        <Annotation Term="Core.Description" String="A short, human-readable text suitable for labels and captions in UIs" />
        <Annotation Term="Core.IsLanguageDependent" />
      </Term>

      <Term Name="Heading" Type="Edm.String">
        <Annotation Term="Core.Description" String="A short, human-readable text suitable for column headings in UIs" />
        <Annotation Term="Core.IsLanguageDependent" />
      </Term>

      <Term Name="QuickInfo" Type="Edm.String">
        <Annotation Term="Core.Description" String="A short, human-readable text suitable for tool tips in UIs" />
        <Annotation Term="Core.IsLanguageDependent" />
      </Term>

      <Term Name="Text" Type="Edm.String" AppliesTo="Property">
        <Annotation Term="Core.Description"
          String="A descriptive text for values of the annotated property. Value MUST be a dynamic expression when used as metadata annotation." />
        <Annotation Term="Core.IsLanguageDependent" />
      </Term>

      <Term Name="TextFormat" Type="Common.TextFormatType" AppliesTo="Property Parameter ReturnType">
        <Annotation Term="Core.Description" String="Human-readable text that may contain formatting information" />
        <Annotation Term="Core.RequiresType" String="Edm.String" />
      </Term>
      <EnumType Name="TextFormatType">
        <Member Name="plain">
          <Annotation Term="Core.Description" String="Plain text, line breaks represented as the character 0x0A" />
        </Member>
        <Member Name="html">
          <Annotation Term="Core.Description" String="Plain text with markup that can validly appear directly within an HTML DIV element" />
        </Member>
      </EnumType>

      <!-- under discussion
        <Term Name="ValidationConstraint" Type="Common.ValidationConstraintType" AppliesTo="Property EntityType ComplexType">
        <Annotation Term="Core.Description" String="Condition that the annotation target has to fulfill" />
        </Term>
        <ComplexType Name="ValidationConstraintType">
        <Property Name="FailureMessage" Type="Edm.String" Nullable="true">
        <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="Condition" Type="Edm.Boolean">
        <Annotation Term="Core.Description"
        String="Value MUST be a dynamic expression that evaluates to true if and only if the constraint is fulfilled" />
        </Property>
        </ComplexType>
      -->
      <!-- Examples:
        <Annotation Term="Common.ValidationConstraint" Qualifier="Comparison">
        <Record>
        <PropertyValue Property="FailureMessage" String="Start date cannot be after end date" />
        <PropertyValue Property="Condition">
        <Le>
        <Path>StartDate</Path>
        <Path>EndDate</Path>
        </Le>
        </PropertyValue>
        </Record>
        </Annotation>

        <Annotation Term="Common.ValidationConstraint" Qualifier="Minimum">
        <Record>
        <PropertyValue Property="FailureMessage" String="Value cannot be negative" />
        <PropertyValue Property="Condition">
        <Ge>
        <Path>Amount</Path>
        <Decimal>0</Decimal>
        </Ge>
        </PropertyValue>
        </Record>
        </Annotation>
      -->
      <!--
        could later be combined with a client-side function sap.matchRegularExpression
        Two arguments of type string, second argument MUST evaluate to a JavaScript regular expression, see e.g.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
        Function returns true if and only if the whole first argument matches the regular expression in the second argumentReturns
      -->

      <Term Name="IsDigitSequence" Type="Core.Tag" DefaultValue="true" AppliesTo="Property Parameter">
        <Annotation Term="Core.Description" String="Contains only digits" />
        <Annotation Term="Core.RequiresType" String="Edm.String" />
      </Term>

      <Term Name="IsUpperCase" Type="Core.Tag" DefaultValue="true" AppliesTo="Property Parameter">
        <Annotation Term="Core.Description" String="Contains just uppercase characters" />
        <Annotation Term="Core.RequiresType" String="Edm.String" />
      </Term>

      <Term Name="SecondaryKey" AppliesTo="EntityType" Type="Collection(Edm.PropertyPath)">
        <Annotation Term="Core.Description"
          String="The listed properties form a secondary key. Multiple secondary keys are possible using different qualifiers." />
      </Term>

      <Term Name="MinOccurs" AppliesTo="NavigationProperty Property EntitySet Term Parameter" Type="Edm.Int64">
        <Annotation Term="Core.Description" String="The annotated set or collection contains at least this number of items" />
      </Term>

      <Term Name="MaxOccurs" AppliesTo="NavigationProperty Property EntitySet Term Parameter" Type="Edm.Int64">
        <Annotation Term="Core.Description" String="The annotated set or collection contains at most this number of items" />
      </Term>

      <Term Name="AssociationEntity" Type="Collection(Edm.NavigationPropertyPath)" AppliesTo="EntityType">
        <Annotation Term="Core.Description">
          <String>Entity representing an n:m association with attributes</String>
        </Annotation>
        <Annotation Term="Common.MinOccurs" Int="2" />
      </Term>

      <Term Name="DerivedNavigation" Type="Edm.NavigationPropertyPath" AppliesTo="NavigationProperty">
        <Annotation Term="Core.Description">
          <String>Shortcut for a multi-segment navigation, contains the long path with all its segments</String>
        </Annotation>
      </Term>

      <Term Name="Masked" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property contains sensitive data that should by default be masked on a UI and clear-text visible only upon user interaction</String>
        </Annotation>
      </Term>

      <Term Name="SemanticObject" Type="Edm.String" AppliesTo="EntitySet EntityType Property">
        <Annotation Term="Core.Description" String="Name of the Semantic Object represented as this entity type or identified by this property" />
      </Term>

      <Term Name="IsInstanceAnnotation" Type="Core.Tag" DefaultValue="true" AppliesTo="Term">
        <Annotation Term="Core.Description"
          String="Term can also be used as instance annotation; AppliesTo of this term specifies where it can be applied" />
      </Term>

      <Term Name="Insertable" Type="Edm.Boolean" DefaultValue="true" AppliesTo="NavigationProperty">
        <Annotation Term="Common.IsInstanceAnnotation" />
        <Annotation Term="Core.Description">
          <String>Specifies whether the service allows to create an entity by sending a POST request to the navigation link URL (in this case the created entity is automatically linked to the entity containing the navigation link)</String>
        </Annotation>
      </Term>

      <Term Name="Updatable" Type="Edm.Boolean" DefaultValue="true" AppliesTo="EntityType">
        <Annotation Term="Common.IsInstanceAnnotation" />
        <Annotation Term="Core.Description">
          <String>Specifies whether the annotated entity can be updated</String>
        </Annotation>
      </Term>

      <Term Name="Deletable" Type="Edm.Boolean" DefaultValue="true" AppliesTo="EntityType">
        <Annotation Term="Common.IsInstanceAnnotation" />
        <Annotation Term="Core.Description">
          <String>Specifies whether the annotated entity can be deleted</String>
        </Annotation>
      </Term>

      <Term Name="FilterExpressionRestrictions" Type="Collection(Common.FilterExpressionRestrictionType)" AppliesTo="EntitySet">
        <Annotation Term="Core.Description" String="These properties only allow a subset of expressions" />
      </Term>
      <ComplexType Name="FilterExpressionRestrictionType">
        <Property Name="Property" Type="Edm.PropertyPath" />
        <Property Name="AllowedExpressions" Type="Common.FilterExpressionType" />
      </ComplexType>
      <EnumType Name="FilterExpressionType">
        <Member Name="SingleValue">
          <Annotation Term="Core.Description" String="a single 'eq' clause" />
        </Member>
        <Member Name="MultiValue">
          <Annotation Term="Core.Description" String="one or more 'eq' clauses, separated by 'or'" />
        </Member>
        <Member Name="SingleInterval">
          <Annotation Term="Core.Description"
            String="at most one 'ge' and one 'le' clause, separated by 'and', alternatively a single 'eq' clause" />
        </Member>
      </EnumType>

      <Term Name="FieldControl" Type="Common.FieldControlType" DefaultValue="Optional" AppliesTo="Property Record">
        <Annotation Term="Core.Description" String="Control state of a property" />
        <Annotation Term="Common.IsInstanceAnnotation" />
      </Term>
      <EnumType Name="FieldControlType" UnderlyingType="Edm.Byte">
        <Member Name="Mandatory" Value="7">
          <Annotation Term="Core.Description" String="Property must have a non-null value" />
        </Member>
        <Member Name="Optional" Value="3">
          <Annotation Term="Core.Description" String="Property may have a value or be null" />
        </Member>
        <Member Name="ReadOnly" Value="1">
          <Annotation Term="Core.Description" String="Property value cannot be changed" />
        </Member>
        <Member Name="Inapplicable" Value="0">
          <Annotation Term="Core.Description" String="Property has no meaning in the current entity state" />
        </Member>
        <Member Name="Hidden" Value="0">
          <Annotation Term="Core.Description" String="Deprecated synonymn for Inapplicable, do not use" />
        </Member>
      </EnumType>

      <!-- End-user messages -->
      <!-- Under discussion ->
        <Term Name="ExceptionCategory" Type="Edm.String">
        <Annotation Term="Core.Description" String="A machine-readable exception category" />
        <Annotation Term="Common.IsInstanceAnnotation" />
        </Term>
        <Term Name="Application" Type="Common.ApplicationType">
        <Annotation Term="Core.Description" String="..." />
        <Annotation Term="Common.IsInstanceAnnotation" />
        </Term>
        <ComplexType Name="ApplicationType">
        <Property Name="Component" Type="Edm.String">
        <Annotation Term="Core.Description" String="Software component of service implementation" />
        </Property>
        <Property Name="ServiceRepository" Type="Edm.String">
        <Annotation Term="Core.Description" String="..." />
        </Property>
        <Property Name="ServiceId" Type="Edm.String">
        <Annotation Term="Core.Description" String="..." />
        </Property>
        <Property Name="ServiceVersion" Type="Edm.String">
        <Annotation Term="Core.Description" String="..." />
        </Property>
        </ComplexType>
        <Term Name="Timestamp" Type="Edm.DateTimeOffset">
        <Annotation Term="Core.Description" String="..." />
        <Annotation Term="Common.IsInstanceAnnotation" />
        </Term>
        <Term Name="TransactionId" Type="Edm.String">
        <Annotation Term="Core.Description" String="..." />
        <Annotation Term="Common.IsInstanceAnnotation" />
        </Term>
        <Term Name="ErrorResolution" Type="Common.ErrorResolutionType">
        <Annotation Term="Core.Description" String="Hints for resolving this error" />
        <Annotation Term="Common.IsInstanceAnnotation" />
        </Term>
        <ComplexType Name="ErrorResolutionType">
        <Property Name="Analysis" Type="Edm.String">
        <Annotation Term="Core.Description" String="Short hint on how to analyze this error" />
        </Property>
        <Property Name="Note" Type="Edm.String">
        <Annotation Term="Core.Description" String="Note for error resolution" />
        </Property>
        <Property Name="AdditionalNote" Type="Edm.String">
        <Annotation Term="Core.Description" String="Additional note for error resolution" />
        </Property>
        </ComplexType>
      -->
      <!-- Under discussion
        <Term Name="Severity" Type="Common.NotificationSeverity">
        <Annotation Term="Core.Description" String="Classifies a notification as info, success, warning, or error" />
        <Annotation Term="Common.IsInstanceAnnotation" />
        </Term>
        <Term Name="Notification" Type="Common.NotificationType">
        <Annotation Term="Common.IsInstanceAnnotation" />
        <Annotation Term="Core.Description" String="Instance annotation for warning and info notifications" />
        </Term>
        <ComplexType Name="NotificationType">
        <Property Name="code" Type="Edm.String" Nullable="false" />
        <Property Name="message" Type="Edm.String" Nullable="false">
        <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="severity" Type="Common.NotificationSeverity" Nullable="false" />
        <Property Name="details" Type="Collection(Common.NotificationDetailType)" />
        </ComplexType>
        <ComplexType Name="NotificationDetailType">
        <Property Name="code" Type="Edm.String" Nullable="false" />
        <Property Name="message" Type="Edm.String" Nullable="false">
        <Annotation Term="Core.IsLanguageDependent" />
        </Property>
        <Property Name="severity" Type="Common.NotificationSeverity" Nullable="false" />
        </ComplexType>
        <EnumType Name="NotificationSeverity">
        <Member Name="success" />
        <Member Name="info" />
        <Member Name="warning" />
        <Member Name="error" />
        </EnumType>
      -->

      <Term Name="IsActionCritical" Type="Edm.Boolean" DefaultValue="true" AppliesTo="Action Function ActionImport FunctionImport">
        <Annotation Term="Core.Description" String="Criticality of the function or action to enforce a warning or similar before it's executed" />
      </Term>

      <Term Name="Attributes" Type="Collection(Edm.PropertyPath)" AppliesTo="Property">
        <Annotation Term="Core.Description" String="Attributes related to this property, which may occur in denormalized entity types" />
      </Term>

      <Term Name="RelatedRecursiveHierarchy" Type="Edm.AnnotationPath" AppliesTo="Property ">
        <Annotation Term="Core.Description"
          String="A recursive hierarchy related to this property. The annotation path must end in Aggregation.RecursiveHierarchy." />
      </Term>

      <Term Name="Interval" Type="Common.IntervalType" AppliesTo="EntityType ComplexType">
        <Annotation Term="Core.Description" String="An interval with lower and upper boundaries described by two properties" />
      </Term>
      <ComplexType Name="IntervalType">
        <Property Name="LowerBoundary" Type="Edm.PropertyPath" Nullable="false">
          <Annotation Term="Core.Description" String="Property holding the lower interval boundary" />
        </Property>
        <Property Name="LowerBoundaryIncluded" Type="Edm.Boolean" DefaultValue="true">
          <Annotation Term="Core.Description" String="The lower boundary value is included in the interval" />
        </Property>
        <Property Name="UpperBoundary" Type="Edm.PropertyPath" Nullable="false">
          <Annotation Term="Core.Description" String="Property holding the upper interval boundary" />
        </Property>
        <Property Name="UpperBoundaryIncluded" Type="Edm.Boolean" DefaultValue="true">
          <Annotation Term="Core.Description" String="The upper boundary value is included in the interval" />
        </Property>
      </ComplexType>

      <Term Name="ResultContext" Type="Core.Tag" DefaultValue="true" AppliesTo="EntityType">
        <Annotation Term="Core.Description">
          <String>The annotated entity type has one or more containment navigation properties.
          An instance of the annotated entity type provides the context required for determining 
          the target entity sets reached by these containment navigation properties.</String>
        </Annotation>
      </Term>


      <!-- Section: Value Help -->
      <Term Name="ValueList" Type="Common.ValueListType" AppliesTo="Property Parameter">
        <Annotation Term="Core.Description" String="Specifies how to get a list of acceptable values for a property or parameter" />
        <Annotation Term="Core.LongDescription"
          String="The value list can be based on user input that is passed in the value list request. The value list can be used for type-ahead and classical pick lists." />
      </Term>
      <ComplexType Name="ValueListType">
        <!--
          Example: Value list for currency code using entity set Currencies with properties Code, Text, Symbol and more
          that
          are not needed in the value list
          - CollectionPath: Currencies
          - SearchSupported: true
          - Parameters:
          - - InOut: LocalDataProperty = CurrencyCode, ValueListPropert = Code

          Example: Region within Country using entity set Regions with properties Code, Name, CountryCode
          - CollectionPath: Regions
          - SearchSupported: false
          - Parameters:
          - - InOut: LocalDataProperty = CountryCode, ValueListProperty = CountryCode
          - - InOut: LocalDataProperty = RegionCode, ValueListProperty = Code

          Open:
          - formatted text with HTML(?) markup where search matches are emphasized
          - layout for value list line item

        -->
        <Property Name="Label" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
          <Annotation Term="Core.Description" String="Headline for value list, fallback is the label of the property or parameter" />
        </Property>
        <Property Name="CollectionPath" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.Description" String="Resource path of an OData collection with possible values, relative to CollectionRoot" />
        </Property>
        <Property Name="CollectionRoot" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.Description"
            String="Service root of the value list collection; not specified means local to the document containing the annotation" />
        </Property>
        <Property Name="SearchSupported" Type="Edm.Boolean">
          <Annotation Term="Core.Description" String="Value list supports the $search query option" />
          <Annotation Term="Core.LongDescription" String="The value of the target property is used as the search expression instead of in $filter" />
        </Property>
        <Property Name="PresentationVariantQualifier" Type="Common.SimpleIdentifier">
          <Annotation Term="Core.Description" String="Alternative representation of a value help, e.g. as a bar chart" />
          <Annotation Term="Core.LongDescription"
            String="Qualifier for annotation with term com.sap.vocabularies.UI.v1.PresentationVariant on the entity set identified via CollectionPath" />
        </Property>
        <Property Name="Parameters" Type="Collection(Common.ValueListParameter)">
          <Annotation Term="Core.Description" String="Instructions on how to construct the value list request and consume response properties" />
        </Property>
      </ComplexType>

      <Term Name="ValueListWithFixedValues" Type="Core.Tag" AppliesTo="Property Parameter">
        <Annotation Term="Core.Description"
          String="If specified as true, there's only one value list mapping and its value list consists of a small number of fixed values" />
      </Term>

      <Term Name="ValueListReferences" Type="Collection(Edm.String)" Nullable="false" AppliesTo="Property Parameter">
        <Annotation Term="Core.IsURL" />
        <Annotation Term="Core.Description"
          String="A list of URLs of CSDL documents containing value list mappings for this parameter or property" />
      </Term>

      <Term Name="ValueListMapping" Type="Common.ValueListMappingType" AppliesTo="Property Parameter">
        <Annotation Term="Core.Description" String="Specifies the mapping between data service properties and value list properties" />
        <Annotation Term="Core.LongDescription"
          String="The value list can be filtered based on user input. It can be used for type-ahead and classical pick lists. There may be many alternative mappings with different qualifiers. The qualifier-less mapping is the default value list." />
      </Term>
      <ComplexType Name="ValueListMappingType">
        <Property Name="Label" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.IsLanguageDependent" />
          <Annotation Term="Core.Description" String="Headline for value list, fallback is the label of the property or parameter" />
        </Property>
        <Property Name="CollectionPath" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.Description"
            String="Resource path of an OData collection with possible values, relative to the document containing the value list mapping" />
        </Property>
        <Property Name="PresentationVariantQualifier" Type="Common.SimpleIdentifier">
          <Annotation Term="Core.Description" String="Alternative representation of a value help, e.g. as a bar chart" />
          <Annotation Term="Core.LongDescription"
            String="Qualifier for annotation with term com.sap.vocabularies.UI.v1.PresentationVariant on the value list entity set identified via CollectionPath in the ValueListReference annotation" />
        </Property>
        <Property Name="Parameters" Type="Collection(Common.ValueListParameter)">
          <Annotation Term="Core.Description" String="Instructions on how to construct the value list request and consume response properties" />
        </Property>
      </ComplexType>

      <ComplexType Name="ValueListParameter" Abstract="true">
        <Property Name="ValueListProperty" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.Description" String="Path to property in response structure. Format is identical to PropertyPath annotations." />
        </Property>
      </ComplexType>
      <ComplexType Name="ValueListParameterIn" BaseType="Common.ValueListParameter">
        <Property Name="LocalDataProperty" Type="Edm.PropertyPath" Nullable="false">
          <Annotation Term="Core.Description" String="Path to property that is used to filter/search the value list" />
        </Property>
      </ComplexType>
      <ComplexType Name="ValueListParameterInOut" BaseType="Common.ValueListParameter">
        <Property Name="LocalDataProperty" Type="Edm.PropertyPath" Nullable="false">
          <Annotation Term="Core.Description" String="Path to property that is used to filter/search the value list or filled from response" />
        </Property>
      </ComplexType>
      <ComplexType Name="ValueListParameterOut" BaseType="Common.ValueListParameter">
        <Property Name="LocalDataProperty" Type="Edm.PropertyPath" Nullable="false">
          <Annotation Term="Core.Description" String="Path to property that is filled from response" />
        </Property>
      </ComplexType>
      <ComplexType Name="ValueListParameterDisplayOnly" BaseType="Common.ValueListParameter">
        <Annotation Term="Core.Description" String="Value list property that is not used to fill the edited entity" />
      </ComplexType>
      <ComplexType Name="ValueListParameterFilterOnly" BaseType="Common.ValueListParameter">
        <Annotation Term="Core.Description"
          String="Value list property that is used to filter the value list, not connected to the edited entity" />
      </ComplexType>

      <!-- Section: Calendar Points in Time -->
      <Term Name="IsCalendarYear" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a year number as string following the logical pattern (-?)YYYY(Y*) consisting of an optional 
          minus sign for years B.C. followed by at least four digits. The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsCalendarHalfyear" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a halfyear number as string following the logical pattern H consisting of a single digit.
          The string matches the regex pattern [1-2]
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsCalendarQuarter" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a calendar quarter number as string following the logical pattern Q consisting of a single digit. 
          The string matches the regex pattern [1-4]
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsCalendarMonth" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a calendar month number as string following the logical pattern MM consisting of two digits. 
          The string matches the regex pattern 0[1-9]|1[0-2]
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsCalendarWeek" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a calendar week number as string following the logical pattern WW consisting of two digits. 
          The string matches the regex pattern 0[1-9]|[1-4][0-9]|5[2-3] 
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsDayOfCalendarMonth" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Day number relative to a calendar month. Valid values are between 1 and 31.  
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.SByte" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsDayOfCalendarYear" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Day number relative to a calendar year. Valid values are between 1 and 366.  
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.Int16" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsCalendarYearHalfyear" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a calendar year and halfyear as string following the logical pattern (-?)YYYY(Y*)H consisting 
          of an optional minus sign for years B.C. followed by at least five digits, where the last digit represents the halfyear.
          The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})[1-2]
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsCalendarYearQuarter" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a calendar year and quarter as string following the logical pattern (-?)YYYY(Y*)Q consisting 
          of an optional minus sign for years B.C. followed by at least five digits, where the last digit represents the quarter.
          The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})[1-4]
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsCalendarYearMonth" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a calendar year and month as string following the logical pattern (-?)YYYY(Y*)MM consisting 
          of an optional minus sign for years B.C. followed by at least six digits, where the last two digits represent the months January to December.
          The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|1[0-2])
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsCalendarYearWeek" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a calendar year and week as string following the logical pattern (-?)YYYY(Y*)WW consisting 
          of an optional minus sign for years B.C. followed by at least six digits, where the last two digits represent week number in the year.
          The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|[1-4][0-9]|5[2-3]) 
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsCalendarDate" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a calendar date: year, month and day as string following the logical pattern (-?)YYYY(Y*)MMDD consisting 
          of an optional minus sign for years B.C. followed by at least eight digits, where the last four digits represent 
          the months January to December (MM) and the day of the month (DD).
          The string matches the regex pattern -?([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])
          The regex pattern does not reflect the additional constraint for "Day-of-month Values":
          The day value must be no more than 30 if month is one of 04, 06, 09, or 11, no more than 28 if month is 02 and year is not divisible by 4, 
          or is divisible by 100 but not by 400, and no more than 29 if month is 02 and year is divisible by 400, or by 4 but not by 100.          
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>


      <!-- Section: Fiscal Points in Time -->
      <Term Name="IsFiscalYear" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a fiscal year number as string following the logical pattern YYYY(Y*) consisting of at least four digits. 
          The string matches the regex pattern [1-9][0-9]{3,}
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsFiscalPeriod" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a fiscal period as string following the logical pattern PPP consisting of three digits. 
          The string matches the regex pattern [0-9]{3}
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsFiscalYearPeriod" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description">
          <String>Property encodes a fiscal year and period as string following the logical pattern YYYY(Y*)PPP consisting 
          of at least seven digits, where the last three digits represent the fiscal period in the year.
          The string matches the regex pattern ([1-9][0-9]{3,})([0-9]{3})
          </String>
        </Annotation>
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>
      <Term Name="IsFiscalYearVariant" Type="Core.Tag" DefaultValue="true" AppliesTo="Property">
        <Annotation Term="Core.Description" String="Property encodes a fiscal year variant" />
        <Annotation Term="Core.RequiresType" String="Edm.String" />
        <Annotation Term="Common.MutuallyExclusiveTerm" Qualifier="DatePart" />
      </Term>


      <!-- Section: Term Constraints -->
      <Term Name="MutuallyExclusiveTerm" Type="Core.Tag" DefaultValue="true" AppliesTo="Term">
        <Annotation Term="Core.Description" String="Only one term of the group identified with the Qualifier attribute can be applied" />
      </Term>


      <!-- Section: Draft Handling -->
      <Term Name="DraftRoot" Type="Common.DraftRootType" AppliesTo="EntitySet">
        <Annotation Term="Core.Description">
          <String>Root entities of business documents that support the draft pattern</String>
        </Annotation>
      </Term>
      <ComplexType Name="DraftRootType" BaseType="Common.DraftNodeType">
        <Property Name="ActivationAction" Type="Common.QualifiedName" Nullable="false">
          <Annotation Term="Core.Description" String="Action that activates a draft document" />
        </Property>
        <Property Name="EditAction" Type="Common.QualifiedName">
          <Annotation Term="Core.Description" String="Action that creates an edit draft" />
        </Property>
        <Property Name="NewAction" Type="Common.QualifiedName">
          <Annotation Term="Core.Description"
            String="Action that creates a new draft. It may have overloads that allow referencing other business documents that are used to pre-fill the new draft" />
        </Property>
      </ComplexType>

      <Term Name="DraftNode" Type="Common.DraftNodeType" AppliesTo="EntitySet">
        <Annotation Term="Core.Description">
          <String>Entities in this set are parts of business documents that support the draft pattern</String>
        </Annotation>
      </Term>
      <ComplexType Name="DraftNodeType">
        <Property Name="PreparationAction" Type="Common.QualifiedName">
          <Annotation Term="Core.Description" String="Action that prepares a draft document for later activation" />
        </Property>
        <Property Name="ValidationFunction" Type="Common.QualifiedName">
          <Annotation Term="Core.Description" String="Function that validates whether a draft document is ready for activation" />
        </Property>
      </ComplexType>

      <Term Name="DraftActivationVia" Type="Collection(Common.SimpleIdentifier)" AppliesTo="EntitySet" Nullable="false">
        <Annotation Term="Core.Description"
          String="Draft entities in this set are indirectly activated via draft entities in the referenced entity sets" />
      </Term>

      <TypeDefinition Name="SimpleIdentifier" UnderlyingType="Edm.String">
        <Annotation Term="Core.Description" String="The SimpleIdentifier of an OData construct in scope" />
      </TypeDefinition>

      <TypeDefinition Name="QualifiedName" UnderlyingType="Edm.String">
        <Annotation Term="Core.Description" String="The QualifiedName of an OData construct in scope" />
      </TypeDefinition>

      <Term Name="SemanticKey" AppliesTo="EntityType" Type="Collection(Edm.PropertyPath)">
        <Annotation Term="Core.Description" String="The listed properties form the semantic key, i.e. they are unique modulo IsActiveEntity" />
      </Term>

      <Term Name="SideEffects" Type="Common.SideEffectsType" AppliesTo="EntitySet EntityType ComplexType Action">
        <Annotation Term="Core.Description">
          <String>
            Changes to the source properties may have side-effects on the target properties or entities.
            
            If neither TargetProperties nor TargetEntities are specified, a change to the source property values may have unforeseeable side-effects.
            An empty NavigationPropertyPath may be used in TargetEntities to specify that any property of the annotated entity type may be affected.
            
            Special case "Actions": here the change trigger is the action invocation, so SourceProperties and SourceEntities have no meaning, 
            only TargetProperties and TargetEntities are relevant. They are addressed via the binding parameter of the action.
          </String>
        </Annotation>
      </Term>
      <ComplexType Name="SideEffectsType">
        <Property Name="SourceProperties" Type="Collection(Edm.PropertyPath)">
          <Annotation Term="Core.Description" String="Changes to the values of one or more of these properties will affect the targets" />
        </Property>
        <Property Name="SourceEntities" Type="Collection(Edm.NavigationPropertyPath)">
          <Annotation Term="Core.Description"
            String="Changes to one or more of these entities will affect the targets. An empty path means the annotation target." />
        </Property>
        <Property Name="TargetProperties" Type="Collection(Edm.PropertyPath)">
          <Annotation Term="Core.Description" String="These properties will be affected if the value of one of the sources changes" />
        </Property>
        <Property Name="TargetEntities" Type="Collection(Edm.NavigationPropertyPath)">
          <Annotation Term="Core.Description"
            String="These entities will be affected if the value of one of the sources changes. An empty path means the annotation target." />
        </Property>
        <Property Name="EffectTypes" Type="Common.EffectType">
          <Annotation Term="Core.Description"
            String="One or more of the targets may show these effects. If not specified, any effect is possible." />
        </Property>
      </ComplexType>
      <EnumType Name="EffectType" IsFlags="true">
        <Member Name="ValidationMessage" Value="1">
          <Annotation Term="Core.Description" String="Validation messages are assigned to a target" />
        </Member>
        <Member Name="ValueChange" Value="2">
          <Annotation Term="Core.Description" String="The value of a target changes" />
        </Member>
        <Member Name="FieldControlChange" Value="4">
          <Annotation Term="Core.Description" String="The value of the Common.FieldControl annotation of a target changes" />
        </Member>
      </EnumType>

      <!-- Section: Default Values -->
      <Term Name="DerivedDefaultValue" Type="Edm.String" AppliesTo="Property">
        <!-- <Annotation Term="Common.IsFunctionImport" /> -->
        <Annotation Term="Core.Description">
          <String>Function import to derive a default value for the property from a given context.</String>
        </Annotation>
        <Annotation Term="Core.LongDescription">
          <String>
            Function import has two parameters of complex types:
            - "parameters", a structure resembling the entity type the parameter entity set related to the entity set of the annotated property
            - "properties", a structure resembling the type of the entity set of the annotated property
            
            The return type must be of the same type as the annotated property.
            
            Arguments passed to the function import are used as context for deriving the default value. 
            The function import returns this default value, or null in case such a value could not be determined.
          </String>
        </Annotation>
      </Term>

      <Term Name="FilterDefaultValue" Type="Edm.PrimitiveType" AppliesTo="Property">
        <Annotation Term="Core.Description" String="A default value for the property to be used in filter expressions." />
      </Term>

      <Term Name="DerivedFilterDefaultValue" Type="Edm.String" AppliesTo="Property">
        <!-- <Annotation Term="Common.IsFunctionImport" /> -->
        <Annotation Term="Core.Description">
          <String>Function import to derive a default value for the property from a given context in order to use it in filter expressions.</String>
        </Annotation>
        <Annotation Term="Core.LongDescription">
          <String>
            Function import has two parameters of complex types:
            - "parameters", a structure resembling the entity type the parameter
            entity set related to the entity set of the annotated property
            - "properties", a structure resembling the
            type of the entity set of the annotated property

            The return type must be of the same type as the annotated
            property.

            Arguments passed to the function import are used as context for deriving the default value.
            The function import returns this default value, or null in case such a value could not be determined.
          </String>
        </Annotation>
      </Term>

      <Term Name="SortOrder" Type="Collection(Common.SortOrderType)" AppliesTo="EntitySet EntityType">
        <Annotation Term="Core.Description">
          <String>List of sort criteria. The Items of the annotated EntitySet or the Items of the 
          collection of the annotated EntityType are sorted by the first entry of the SortOrder collection. 
          Items with same value for this first sort criteria are sorted by the second entry of the SortOrder Collection, and so on. </String>
        </Annotation>
      </Term>
      <ComplexType Name="SortOrderType">
        <Property Name="Property" Type="Edm.PropertyPath" Nullable="false">
          <Annotation Term="Core.Description" String="Sort property" />
        </Property>
        <Property Name="Descending" Type="Edm.Boolean" DefaultValue="false">
          <Annotation Term="Core.Description" String="Sort direction ; default is ascending" />
        </Property>
      </ComplexType>

      <!-- under discussion with Heiko Theissen, Heiko Gerwens, Christoph Glania, and Ralf Dentzer
        <Term Name="CacheControlProposal" Type="Common.CacheControlProposalType" AppliesTo="EntitySet">
        <Annotation Term="Core.Description">
        <String>Proposed values for the Cache-Control request header when accessing this entity set, see https://tools.ietf.org/html/rfc7234#section-5.2.1</String>
        </Annotation>
        </Term>
        <ComplexType Name="CacheControlProposalType">
        <Property Name="MaxAge" Type="Edm.Int32">
        <Annotation Term="Core.Description"
        String="Maximum acceptable age of the response in seconds, see https://tools.ietf.org/html/rfc7234#section-5.2.1.1"
        />
        </Property>
        </ComplexType>
      -->

      <Term Name="RecursiveHierarchy" BaseTerm="Aggregation.RecursiveHierarchy" Type="Common.RecursiveHierarchyType">
        <Annotation Term="Core.Description">
          <String>Defines a recursive hierarchy.</String>
        </Annotation>
      </Term>
      <ComplexType Name="RecursiveHierarchyType">
        <Property Name="ExternalNodeKeyProperty" Type="Edm.PropertyPath">
          <Annotation Term="Core.Description" String="Property holding the external human-readable key identifying the node" />
        </Property>
        <Property Name="NodeDescendantCountProperty" Type="Edm.PropertyPath">
          <Annotation Term="Core.Description">
            <String>Property holding the descendant count for a hierarchy node. 
            The descendant count of a node is the number of its descendants in the hierarchy structure of the result considering 
            only those nodes matching any specified $filter and $search. A property holding descendant counts has an integer 
            data type.</String>
          </Annotation>
        </Property>
        <Property Name="NodeDrillStateProperty" Type="Edm.PropertyPath">
          <Annotation Term="Core.Description">
            <String>Property holding the drill state of a hierarchy node. The drill state is indicated 
            by one of the following string values: collapsed, expanded, or leaf. For an expanded node, its 
            children are included in the result collection. For a collapsed node, the children are included in the entity set, but 
            they are not part of the result collection. Retrieving them requires a relaxed filter expression or a separate request 
            filtering on the parent node ID with the ID of the collapsed node. A leaf does not have any child in the entity set.
            </String>
          </Annotation>
        </Property>
      </ComplexType>


      <!-- Metadata annotations that can also appear as instance annotations -->

      <Term Name="CreatedAt" Type="Edm.DateTimeOffset" AppliesTo="EntityType">
        <Annotation Term="Core.Description" String="Creation timestamp" />
        <Annotation Term="Common.IsInstanceAnnotation" />
      </Term>
      <Term Name="CreatedBy" Type="Common.UserID" AppliesTo="EntityType">
        <Annotation Term="Core.Description" String="First editor" />
        <Annotation Term="Common.IsInstanceAnnotation" />
      </Term>
      <Term Name="ChangedAt" Type="Edm.DateTimeOffset" AppliesTo="EntityType">
        <Annotation Term="Core.Description" String="Last modification timestamp" />
        <Annotation Term="Common.IsInstanceAnnotation" />
      </Term>
      <Term Name="ChangedBy" Type="Common.UserID" AppliesTo="EntityType">
        <Annotation Term="Core.Description" String="Last editor" />
        <Annotation Term="Common.IsInstanceAnnotation" />
      </Term>
      <TypeDefinition Name="UserID" UnderlyingType="Edm.String">
        <Annotation Term="Core.Description" String="User ID" />
        <Annotation Term="Common.IsInstanceAnnotation" />
      </TypeDefinition>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>
